Copyright (C) 2016, Michał Szymański
Praca na zaliczenie projektu w ramach przedmiotu
Architektura Komputerów 2
Politechnika Wrocławska


Files in this directory
~~~~~~~~~~~~~~~~~~~~~~~

 Written in Python:
   rns.py ------- implementation of RNS system in Python
   pytests.py --- test suite for Python implementation

 Written in C:
   rns.h -------- header file for RNS implementation
   main.c ------- main program doing computations in RNS using Assembler library
   utils.c ------ utility functions, called from main program
   unit_test.h -- header file for unit testing
   unit_test.c -- unit testing program

 Written in x86-64 assembly:
   rns_env.s, rns_add.s, rns_sub.s, rns_mul.s
     -- implementation of RNS system in Assembler
   read_int128.s, add_int128.s, sub_int128.s, load_int128.s, copy_int128.s,
   shl_int128.s
     -- implementation of 128-bit number arithmetic
   int_to_rns.s
     -- implementation of conversion form natural binary to RNS form


User Manual
~~~~~~~~~~~

Launching the Assembler implementation:
  ./rns 56 78
will compute sum, difference and multiplication of the given values in decimal
system. All computations will be done using Assembler RNS library.

There is also another mode of execution, without conversion to decimal.
When launched as:
  ./rns 1 2 3 4 9 8 7 6
the program will compute sum, difference and multiplication of the given
values, interpreted as [1 2 3 4] and [9 8 7 6], and print the results also
in RNS notation, one in a line.

To run a test suite on a whole project, run:
  ./pytests.py


Developer's Manual
~~~~~~~~~~~~~~~~~~

You should take a first look at rns.h. There are all the prototypes of
functions implemented in Assembly to perform RNS-based arithmetic.

For the implementation of a particular function, refer to *.s files.
